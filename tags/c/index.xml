<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Petrie's Site</title><link>https://petrie.github.io/tags/c/</link><description>Recent content in C on Petrie's Site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 12 Apr 2018 18:22:53 +0000</lastBuildDate><atom:link href="https://petrie.github.io/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>PHP内存管理ZMM（五）－大内存区large_free_bucket的存入</title><link>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%BA%94%E5%A4%A7%E5%86%85%E5%AD%98%E5%8C%BAlarge_free_bucket%E7%9A%84%E5%AD%98%E5%85%A5/</link><pubDate>Thu, 12 Apr 2018 18:22:53 +0000</pubDate><guid>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%BA%94%E5%A4%A7%E5%86%85%E5%AD%98%E5%8C%BAlarge_free_bucket%E7%9A%84%E5%AD%98%E5%85%A5/</guid><description>&lt;p>之前的章节中介绍过large_free_bucket的存入条件。这一篇将介绍large_free_bucket的主要结构包括其中的链表结构和树结构和存入取出流程。本章讲通过图示大内存区域内存分部情况。&lt;/p>
&lt;h3 id="什么时候会向large_free_bucket存入内存块">什么时候会向large_free_bucket存入内存块&lt;/h3>
&lt;p>这里在复习下存入large_free_bucket流程。在调用emalloc申请能存，且在当前heap中没有找到合适内存块，emalloc函数会调用malloc向内核申请内存。向内核申请每次只能申请 heap-&amp;gt;block_size倍数大小内存。所以内核申请到的 heap-&amp;gt;block_size倍数 大小的内存并不会全部返回到emalloc调用者，而是有剩余。&lt;/p></description></item><item><title>PHP内存管理ZMM（四）－GDB调试php源码并手动调用ZMM相关函数</title><link>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E5%9B%9Bgdb%E8%B0%83%E8%AF%95php%E6%BA%90%E7%A0%81%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%B0%83%E7%94%A8zmm%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</link><pubDate>Wed, 11 Apr 2018 18:22:53 +0000</pubDate><guid>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E5%9B%9Bgdb%E8%B0%83%E8%AF%95php%E6%BA%90%E7%A0%81%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%B0%83%E7%94%A8zmm%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</guid><description>&lt;p>本章讲介绍gdb调试php，并手动调用ZMM中申请内存和查找大内存块的函数&lt;/p>
&lt;ul>
&lt;li>_zend_mm_alloc_int&lt;/li>
&lt;li>zend_mm_search_large_block&lt;/li>
&lt;/ul>
&lt;h4 id="为什么要手动调用函数">为什么要手动调用函数&lt;/h4>
&lt;p>在阅读PHP ZMM源码的时候，有许多复杂的逻辑仅仅通过阅读源码很难理解，比如大内存large_free_buckets结构的构造。同构手动调用函数，可以方便的执行要申请的内存大小，从而测试构造large_free_buckets结构&lt;/p></description></item><item><title>PHP内存管理ZMM（三）－内存分配函数emalloc</title><link>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%B8%89%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%87%BD%E6%95%B0emalloc/</link><pubDate>Wed, 11 Apr 2018 10:22:53 +0000</pubDate><guid>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%B8%89%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%87%BD%E6%95%B0emalloc/</guid><description>&lt;h4 id="主流程">主流程&lt;/h4>
&lt;p>emalloc是ZMM中heap层实现的函数，其内部调用_zend_mm_alloc_int函数。在_zend_mm_alloc_int中会依次在heap层的缓存区、小内存区、大内存区、剩余内存区寻找合适的内存。如果在这四个区域中都为查找到合适的内存，则调用malloc向内核申请，在向内核申请内存时，申请的大小必须是segment_size(256k)的整数倍，最小为256k。以下用流程图展示&lt;/p></description></item><item><title>PHP内存管理ZMM（二）－常见宏的值</title><link>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%BA%8C%E5%B8%B8%E8%A7%81%E5%AE%8F%E7%9A%84%E5%80%BC/</link><pubDate>Mon, 09 Apr 2018 14:22:25 +0000</pubDate><guid>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%BA%8C%E5%B8%B8%E8%A7%81%E5%AE%8F%E7%9A%84%E5%80%BC/</guid><description>&lt;h4 id="相关宏的定义">相关宏的定义&lt;/h4>
&lt;p>64位系统非debug模式编译后的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_ALIGNMENT 8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_ALIGNMENT_LOG2 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_MIN_SIZE ((ZEND_MM_ALIGNED_MIN_HEADER_SIZE&amp;gt;(ZEND_MM_ALIGNED_HEADER_SIZE+END_MAGIC_SIZE))?(ZEND_MM_ALIGNED_MIN_HEADER_SIZE-(ZEND_MM_ALIGNED_HEADER_SIZE+END_MAGIC_SIZE)):0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_MAX_SMALL_SIZE ((ZEND_MM_NUM_BUCKETS&amp;lt;&amp;lt;ZEND_MM_ALIGNMENT_LOG2)+ZEND_MM_ALIGNED_MIN_HEADER_SIZE)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_ALIGNED_HEADER_SIZE ZEND_MM_ALIGNED_SIZE(sizeof(zend_mm_block))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_ALIGNED_FREE_HEADER_SIZE ZEND_MM_ALIGNED_SIZE(sizeof(zend_mm_small_free_block))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_MIN_ALLOC_BLOCK_SIZE ZEND_MM_ALIGNED_SIZE(ZEND_MM_ALIGNED_HEADER_SIZE + END_MAGIC_SIZE)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_ALIGNED_MIN_HEADER_SIZE (ZEND_MM_MIN_ALLOC_BLOCK_SIZE&amp;gt;ZEND_MM_ALIGNED_FREE_HEADER_SIZE?ZEND_MM_MIN_ALLOC_BLOCK_SIZE:ZEND_MM_ALIGNED_FREE_HEADER_SIZE)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_ALIGNED_SEGMENT_SIZE ZEND_MM_ALIGNED_SIZE(sizeof(zend_mm_segment))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_TRUE_SIZE(size) ((size&amp;lt;ZEND_MM_MIN_SIZE)?(ZEND_MM_ALIGNED_MIN_HEADER_SIZE):(ZEND_MM_ALIGNED_SIZE(size+ZEND_MM_ALIGNED_HEADER_SIZE+END_MAGIC_SIZE)))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_SMALL_SIZE(true_size) (true_size &amp;lt; ZEND_MM_MAX_SMALL_SIZE)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ZEND_MM_BUCKET_INDEX(true_size) ((true_size&amp;gt;&amp;gt;ZEND_MM_ALIGNMENT_LOG2)-(ZEND_MM_ALIGNED_MIN_HEADER_SIZE&amp;gt;&amp;gt;ZEND_MM_ALIGNMENT_LOG2))
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面依次解释各个宏的含义和作用&lt;/p>
&lt;ul>
&lt;li>ZEND_MM_ALIGNMENT&lt;/li>
&lt;/ul>
&lt;p>内存对齐的时候用到，值为8，无特别的逻辑含义&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ZEND_MM_ALIGNMENT_LOG2&lt;/p>
&lt;p>辅助内存对齐的时候用到，值为3，无特别的逻辑含义&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>PHP内存管理ZMM(一)－基本概念、数据结构和相关初始化函数</title><link>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%B8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%9B%B8%E5%85%B3%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0/</link><pubDate>Sun, 08 Apr 2018 06:06:12 +0000</pubDate><guid>https://petrie.github.io/2018/04/php%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86zmm%E4%B8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%9B%B8%E5%85%B3%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0/</guid><description>&lt;h4 id="基本概念">基本概念&lt;/h4>
&lt;p>&lt;img src="http://flykobe.com/wp-content/uploads/2015/03/php-zend-memory-manager.jpg" alt="ZZM架构图">&lt;/p>
&lt;p>如上图所示，中间部分的zend memory manage由接口层、heap层、存储层(storage)组成。内存管理的主要逻辑在heap层中，后续主要讲解相关的数据结构和函数流程。&lt;/p>
&lt;h4 id="基本数据结构">基本数据结构&lt;/h4>
&lt;p>基于PHP-5.6&lt;/p>
&lt;h5 id="zend_mm_block_info">zend_mm_block_info&lt;/h5>
&lt;p>_zend_mm_block_info是ZMM内存管理中最小的数据单元。各字段含义见代码注释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> _zend_mm_block_info {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#if ZEND_MM_COOKIES
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> size_t _cookie;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> size_t _size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size_t _prev;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} zend_mm_block_info;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>